/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _ABSTRACT_VIDEO_OVERLAY_RPC_SERVER_H_
#define _ABSTRACT_VIDEO_OVERLAY_RPC_SERVER_H_

#include <jsonrpc/rpc.h>

class Abstract_video_overlay_rpc_Server : public jsonrpc::AbstractServer<Abstract_video_overlay_rpc_Server>
{
    public:
        Abstract_video_overlay_rpc_Server(jsonrpc::AbstractServerConnector* conn) :
            jsonrpc::AbstractServer<Abstract_video_overlay_rpc_Server>(conn) 
        {
            this->bindAndAddMethod(new jsonrpc::Procedure("add_msg", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "dropshadow",jsonrpc::JSON_BOOLEAN,"font",jsonrpc::JSON_STRING,"friendly_name",jsonrpc::JSON_STRING,"msg",jsonrpc::JSON_STRING,"timeout",jsonrpc::JSON_REAL,"underlay",jsonrpc::JSON_BOOLEAN,"x",jsonrpc::JSON_INTEGER,"y",jsonrpc::JSON_INTEGER, NULL), &Abstract_video_overlay_rpc_Server::add_msgI);
            this->bindAndAddMethod(new jsonrpc::Procedure("add_scrolling_msg", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "dropshadow",jsonrpc::JSON_BOOLEAN,"font",jsonrpc::JSON_STRING,"friendly_name",jsonrpc::JSON_STRING,"loop",jsonrpc::JSON_INTEGER,"msg",jsonrpc::JSON_STRING,"scroll_time",jsonrpc::JSON_REAL,"underlay",jsonrpc::JSON_BOOLEAN,"y_pos",jsonrpc::JSON_INTEGER, NULL), &Abstract_video_overlay_rpc_Server::add_scrolling_msgI);
            this->bindAndAddMethod(new jsonrpc::Procedure("remove_msg", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "friendly_name",jsonrpc::JSON_STRING, NULL), &Abstract_video_overlay_rpc_Server::remove_msgI);
            this->bindAndAddMethod(new jsonrpc::Procedure("remove_scrolling_msg", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_STRING, "friendly_name",jsonrpc::JSON_STRING, NULL), &Abstract_video_overlay_rpc_Server::remove_scrolling_msgI);

        }
        
        inline virtual void add_msgI(const Json::Value& request, Json::Value& response) 
        {
            response = this->add_msg(request["dropshadow"].asBool(), request["font"].asString(), request["friendly_name"].asString(), request["msg"].asString(), request["timeout"].asDouble(), request["underlay"].asBool(), request["x"].asInt(), request["y"].asInt());
        }

        inline virtual void add_scrolling_msgI(const Json::Value& request, Json::Value& response) 
        {
            response = this->add_scrolling_msg(request["dropshadow"].asBool(), request["font"].asString(), request["friendly_name"].asString(), request["loop"].asInt(), request["msg"].asString(), request["scroll_time"].asDouble(), request["underlay"].asBool(), request["y_pos"].asInt());
        }

        inline virtual void remove_msgI(const Json::Value& request, Json::Value& response) 
        {
            response = this->remove_msg(request["friendly_name"].asString());
        }

        inline virtual void remove_scrolling_msgI(const Json::Value& request, Json::Value& response) 
        {
            response = this->remove_scrolling_msg(request["friendly_name"].asString());
        }


        virtual std::string add_msg(const bool& dropshadow, const std::string& font, const std::string& friendly_name, const std::string& msg, const double& timeout, const bool& underlay, const int& x, const int& y) = 0;
        virtual std::string add_scrolling_msg(const bool& dropshadow, const std::string& font, const std::string& friendly_name, const int& loop, const std::string& msg, const double& scroll_time, const bool& underlay, const int& y_pos) = 0;
        virtual std::string remove_msg(const std::string& friendly_name) = 0;
        virtual std::string remove_scrolling_msg(const std::string& friendly_name) = 0;

};
#endif //_ABSTRACT_VIDEO_OVERLAY_RPC_SERVER_H_
